name: Nightly QA Deployment

on:
  schedule:
    - cron: '0 2 * * *'  # Runs at 2 AM UTC daily
  workflow_dispatch:     # Also allows manual triggering

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fsv-app
  QA_EC2_INSTANCE_ID: i-0f16adc52da0f3447  # Permanent QA EC2 instance
  DB_HOST: fixedstrike.cdgrdbxezfp6.us-east-1.rds.amazonaws.com
  DB_NAME: fixedstrike
  DB_USER: admin
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v3
        
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: p-archamb/FixedStrikeVolatility
          path: source
          token: ${{ secrets.SOURCE_REPO_PAT }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Launch verification EC2 instance
        id: launch-ec2
        run: |
          # Get default VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
          echo "Using default VPC: $VPC_ID"
          
          # Get first subnet in default VPC
          SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[0].SubnetId" --output text)
          echo "Using subnet: $SUBNET_ID"
          
          # Get or create security group
          SG_NAME="verification-instance-sg"
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=$SG_NAME" "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[0].GroupId" --output text)
          
          if [ "$SG_ID" = "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating new security group: $SG_NAME"
            SG_ID=$(aws ec2 create-security-group --group-name $SG_NAME --description "Security group for verification instances" --vpc-id $VPC_ID --query "GroupId" --output text)
            
            # Allow SSH, HTTP, and HTTPS
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0
          fi
          
          echo "Using security group: $SG_ID"
          
          # Get the latest Amazon Linux 2 AMI
          AMI_ID=$(aws ec2 describe-images \
            --owners amazon \
            --filters "Name=name,Values=amzn2-ami-hvm-2.0.*-x86_64-gp2" "Name=state,Values=available" \
            --query "sort_by(Images, &CreationDate)[-1].ImageId" \
            --output text)
          
          echo "Using AMI: $AMI_ID"
          
          # Create a very simple user-data script for debugging
          cat > user-data.sh << 'EOF'
          #!/bin/bash
          echo "Instance started at $(date)" > /tmp/startup.log
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Test Instance</h1><p>This is a test instance.</p></body></html>" > /var/www/html/index.html
          EOF
          
          # Launch instance with minimal configuration
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type t2.micro \
            --security-group-ids $SG_ID \
            --subnet-id $SUBNET_ID \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Simple-Test-Instance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
            
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          
          # Wait for instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          
          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Wait for instance initialization and debug
        id: instance-initialization-and-debug
        run: |
          echo "Waiting for instance to initialize and start the application..."
          sleep 120  # Allow time for the instance to initialize
          
          # Get the instance ID
          INSTANCE_ID=${{ steps.launch-ec2.outputs.instance_id }}
          
          # Check instance status
          echo "Checking instance status..."
          aws ec2 describe-instance-status --instance-ids $INSTANCE_ID
          
          # Try to get system logs
          echo "Retrieving system logs..."
          aws ec2 get-console-output --instance-id $INSTANCE_ID
          
      - name: Check if web server is running
        run: |
          INSTANCE_ID=${{ steps.launch-ec2.outputs.instance_id }}
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids $INSTANCE_ID \
            --parameters '{"commands":["netstat -tulpn | grep -E \":(80|8080)\"","ps aux | grep -E \"(docker|java)\"","docker ps"]}' \
            --output text

      - name: Run smoke tests
        id: smoke-tests
        run: |
          cd source/tests
          npm install
          TEST_URL=http://${{ steps.launch-ec2.outputs.public_ip }} npm run smoke-tests
          
      - name: Build and push image if tests pass
        if: success()
        id: build-image
        run: |
          cd source
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Deploy to QA EC2
        if: success()
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ steps.build-image.outputs.image_tag }}
          
          aws ssm send-command \
            --instance-ids ${{ env.QA_EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters commands=["cd /opt/deployment && ./deploy.sh $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"]
      
      - name: Terminate verification instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.launch-ec2.outputs.instance_id }}