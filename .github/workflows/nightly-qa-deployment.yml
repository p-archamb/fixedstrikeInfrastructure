name: Nightly QA Deployment

on:
  schedule:
    - cron: '00 8 * * *'  # Runs at midnight PST
  workflow_dispatch:     # Also allows manual triggering

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fsv-app
  QA_EC2_INSTANCE_ID: i-0f16adc52da0f3447  # Permanent QA EC2 instance
  DB_HOST: fixedstrike.cdgrdbxezfp6.us-east-1.rds.amazonaws.com
  DB_NAME: fixedstrike
  DB_USER: admin
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v3
        
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: p-archamb/FixedStrikeVolatility
          path: source
          token: ${{ secrets.SOURCE_REPO_PAT }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Build the application locally and push to ECR
      - name: Build application image locally
        id: build-image
        run: |
          cd source
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          
          # Build the image
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG-test .
          
          # Push to ECR with a test tag (will be removed if tests fail)
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG-test
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Launch verification EC2 instance
        id: launch-ec2
        run: |
          # Use same VPC ID as RDS to allow connectivity
          VPC_ID=${{ secrets.VPC_ID }}
          
          SUBNET_ID=${{ secrets.SUBNET_ID }}
          
          # Use QA EC2 SG_ID, since it has access to the private RDS
          SG_ID=${{ secrets.SG_ID }}
          
          # Get the latest Amazon Linux 2 AMI
          AMI_ID=$(aws ec2 describe-images \
            --owners amazon \
            --filters "Name=name,Values=amzn2-ami-hvm-2.0.*-x86_64-gp2" "Name=state,Values=available" \
            --query "sort_by(Images, &CreationDate)[-1].ImageId" \
            --output text)
          echo "Using AMI: $AMI_ID"
          
          # Create user-data script to run the application
          cat > user-data.sh << 'EOF'
          #!/bin/bash
          echo "Instance started at $(date)" > /tmp/startup.log
          
          # Install Docker
          yum update -y
          amazon-linux-extras install -y docker
          systemctl start docker
          systemctl enable docker
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          yum install -y unzip
          unzip awscliv2.zip
          ./aws/install
          
          # Set up AWS credentials for ECR access
          mkdir -p /root/.aws
          cat > /root/.aws/credentials << 'AWSCREDS'
          [default]
          aws_access_key_id=AWS_ACCESS_KEY_ID
          aws_secret_access_key=AWS_SECRET_ACCESS_KEY
          aws_session_token=AWS_SESSION_TOKEN
          AWSCREDS
          
          cat > /root/.aws/config << 'AWSCONFIG'
          [default]
          region=AWS_REGION
          AWSCONFIG
          
          # Login to ECR
          aws ecr get-login-password --region AWS_REGION | docker login --username AWS --password-stdin ECR_REGISTRY
          
          # Pull our actual application from ECR
          docker pull ECR_REGISTRY/ECR_REPOSITORY:IMAGE_TAG-test
          
          # Run our application
          docker run -d -p 80:8080 \
            -e SPRING_DATASOURCE_URL="jdbc:mysql://DB_HOST:3306/DB_NAME" \
            -e SPRING_DATASOURCE_USERNAME="DB_USER" \
            -e SPRING_DATASOURCE_PASSWORD="DB_PASSWORD" \
            ECR_REGISTRY/ECR_REPOSITORY:IMAGE_TAG-test
          
          echo "Setup complete at $(date)" >> /tmp/startup.log
          EOF
          
          # Replace placeholders with actual values
          sed -i "s|AWS_ACCESS_KEY_ID|${{ secrets.AWS_ACCESS_KEY_ID }}|g" user-data.sh
          sed -i "s|AWS_SECRET_ACCESS_KEY|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" user-data.sh
          sed -i "s|AWS_SESSION_TOKEN|${{ secrets.AWS_SESSION_TOKEN }}|g" user-data.sh
          sed -i "s|AWS_REGION|${{ env.AWS_REGION }}|g" user-data.sh
          sed -i "s|ECR_REGISTRY|${{ steps.login-ecr.outputs.registry }}|g" user-data.sh
          sed -i "s|ECR_REPOSITORY|${{ env.ECR_REPOSITORY }}|g" user-data.sh
          sed -i "s|IMAGE_TAG|${{ steps.build-image.outputs.image_tag }}|g" user-data.sh
          sed -i "s|DB_HOST|${{ env.DB_HOST }}|g" user-data.sh
          sed -i "s|DB_NAME|${{ env.DB_NAME }}|g" user-data.sh
          sed -i "s|DB_USER|${{ env.DB_USER }}|g" user-data.sh
          sed -i "s|DB_PASSWORD|${{ secrets.DB_PASSWORD }}|g" user-data.sh
          
          # Launch instance with actual application
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type t2.micro \
            --security-group-ids $SG_ID \
            --subnet-id $SUBNET_ID \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=App-Verification-Instance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          
          # Wait for instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          
          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Wait for instance initialization
        run: |
          echo "Waiting for instance to initialize and start the application..."
          sleep 180  # Wait 3 minutes for initialization
          
          # Get the public IP
          PUBLIC_IP=${{ steps.launch-ec2.outputs.public_ip }}
          
          # Check if the instance is responding to HTTP requests
          echo "Checking if the application is responding..."
          
          # Try HTTP request with retries
          MAX_RETRIES=10
          RETRY_COUNT=0
          HTTP_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$HTTP_SUCCESS" = false ]; do
            if curl -s -m 10 http://$PUBLIC_IP/ > /dev/null; then
              HTTP_SUCCESS=true
              echo "✅ Application is responding!"
            else
              echo "Application not responding yet. Retrying ($((RETRY_COUNT+1))/$MAX_RETRIES)..."
              sleep 30
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          
          if [ "$HTTP_SUCCESS" = false ]; then
            echo "❌ Application is not responding after all retries"
            exit 1
          fi

      - name: Run smoke tests
        id: smoke-tests
        run: |
          cd source/tests
          npm install
          TEST_URL=http://${{ steps.launch-ec2.outputs.public_ip }} npm run smoke-tests
      
      # If tests pass, promote the image by re-tagging, if tests fail, delete the test image
      - name: Promote or delete image based on test results
        if: always()
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ steps.build-image.outputs.image_tag }}
          
          if [ ${{ job.status }} == "success" ]; then
            echo "Tests passed, promoting image to production tags"
            
            # Tag the image with permanent tags using docker tag and push
            docker pull $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG-test
            docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG-test $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
            docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG-test $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
            
            # Push the permanent tags
            docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
            docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
            
            # Remove the test tag after successful promotion
            aws ecr batch-delete-image \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageTag=$IMAGE_TAG-test
            
            echo "✅ Image promoted with tags: $IMAGE_TAG and latest, test tag removed"
          else
            echo "Tests failed, removing test image"
            
            # Delete the test image
            aws ecr batch-delete-image \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageTag=$IMAGE_TAG-test
            
            echo "❌ Test image removed from ECR"
            exit 1
          fi
          
      # Deploy to QA EC2 if tests pass
      - name: Set up SSH for QA deployment
        if: success()
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to QA EC2
        if: success()
        run: |
          # Get the EC2 hostname from the instance ID
          EC2_HOST=$(aws ec2 describe-instances \
            --instance-ids ${{ env.QA_EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          
          # Add host key
          mkdir -p ~/.ssh
          ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts
          
          # Pass the AWS credentials to the deploy script
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ steps.build-image.outputs.image_tag }}
          
          ssh ec2-user@$EC2_HOST "export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' && \
                                export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' && \
                                export AWS_SESSION_TOKEN='${{ secrets.AWS_SESSION_TOKEN }}' && \
                                export AWS_DEFAULT_REGION='${{ env.AWS_REGION }}' && \
                                cd /opt/deployment && \
                                ./deploy.sh $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
      
      # Always clean up the verification instance
      - name: Terminate verification instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ steps.launch-ec2.outputs.instance_id }}